1) Create a multi-level inheritance , instantiate the child class and observe constructor 
invocation.Also show, if needed how will u invoke parent class constructor from child class ?

package p2;

class Base {
	Base()
	{
		System.out.println("in base const");
	}
}

class sub1 extends Base
{
	sub1(int k)
	{
		System.out.println("in sub1 para const");
	}
	public void disp() {
		System.out.println("in sub1 dis");
	}
}

class sub2 extends sub1
{
	sub2()
	{
		super(10);//Should be i n all cont and at 1st line
		System.out.println("in sub2 const");
		//super.disp();
	}
	sub2(int j)
	{
		super(10);
		System.out.println("in sub2 const");
		
	}
}

class sub3 extends sub2
{
	sub3()
	{
		
		System.out.println("in sub3 const");
	}
}

public class AssignmentDay5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		sub3 s3=new sub3();
		

	}

}

2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a 
class FourWheeler. How will u override "start()" method of parent class ?

package p2;

class Vehicle {
	public void start()
	{
		System.out.println("in vehicle start");
	}
}

class FourWheeler extends Vehicle
{
	public void start()
	{
		System.out.println("in Fourwheeler start");
	}
}



public class AssignmentDay5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Vehicle v=new Vehicle();
				v.start();
		FourWheeler v1=new FourWheeler();
				v1.start();
		Vehicle v2=new FourWheeler();
			    v2.start();	
		

	}

}

3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.package p2;

class Base {
	Base()
	{
		System.out.println("in base const");
	}
}

class sub1 extends Base
{
	sub1(int k)
	{
		System.out.println("in sub1 para const");
	}
	public void disp() {
		System.out.println("in sub1 dis");
	}
}

class sub2 extends Base
{
	sub2()
	{
		//super(10);//Should be i n all cont and at 1st line
		System.out.println("in sub2 const");
		//super.disp();
	}
	sub2(int j)
	{
		//super(10);
		System.out.println("in sub2 const");
		
	}
}

class sub3 extends Base
{
	sub3()
	{
		
		System.out.println("in sub3 const");
	}
}

public class AssignmentDay5 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		sub1 s1=new sub1(10);
		sub2 s2=new sub2();
		sub3 s3=new sub3();
		

	}

}




4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.

package p2;

class Top1 {
	public void disp1()
	{
		System.out.println("in Top1 disp1");
	}
}

class Bottom1 extends Top1
{
	public void disp1()
	{
		System.out.println("in Bottom1 disp1");
	}
}

class Bottom2 extends Top1
{
	public void disp1()
	{
		System.out.println("in Bottom2 disp1");
	}
}

class Bottom3 extends Top1
{
	public void disp1()
	{
		System.out.println("in Bottom3 disp1");
	}
}


public class AssignmentDay5 {
	
	public static void perform(Top1 t)
	{
		t.disp1();
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		perform(new Bottom1());
		perform(new Bottom2());
		perform(new Bottom3());

	}

}

5) create abstract class Shape. declare "draw()" function as abstract. From this class define 
"Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.

package p2;

abstract class Shape {
	abstract void draw();
	
}

class Triangle extends Shape
{
	public void draw()
	{
		System.out.println("inside Triangle draw");
	}
}

class Polygon extends Shape
{
	public void draw()
	{
		System.out.println("inside Polygon draw");
	}
}

class Circle extends Shape
{
	public void draw()
	{
		System.out.println("inside Circle draw");
	}
}


public class AssignmentDay5 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Shape s[]=new Shape[3];
		      s[0]=new Triangle();
		      s[1]=new Polygon();
		      s[2]=new Circle();
		  for(int i=0;i<s.length;i++)
			{
					s[i].draw();
			}     
		
	}

}

6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.

package p2;

interface A{
	 void disp();
	
}


interface B
{
	 void disp2();
	
}

class C implements B
{
	public void disp1()
	{
		System.out.println("disp1 is defined");
	}
	public void disp2()
	{
		System.out.println("disp2 is defined");
	}
	public void disp3()
	{
		System.out.println("disp3 is decl and defined");
	}
}




public class AssignmentDay5 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		  C ref=new C();
		    ref.disp1();
		    ref.disp2();
		    ref.disp3();
		    
		
	}

}

7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.

package p2;

class Parent1{
	void disp1()
	{
		System.out.println("inside disp1");
	}
}
interface Parent2{
	 void disp2();
	
}


class C extends Parent1 implements Parent2 
{
	
	public void disp2()
	{
		System.out.println("disp2 is defined");
	}
	public void disp3()
	{
		System.out.println("disp3 is decl and defined");
	}
}




public class AssignmentDay5 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		  C ref=new C();
		    ref.disp1();
		    ref.disp2();
		    ref.disp3();
		    
		
	}

}

8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.

package p2;

class base1{
	int num1;
	base1(int num1)
	{
		this.num1=num1;
		System.out.println("inside base1 para const");
	}
}

class sub1 extends base1 
{
	int num2;
	int num3;
	sub1()
	{
		super(10);
		System.out.println("inside sub1 default const");
	}
	sub1(int num2)
	{
		super(10);
		this.num2=num2;
		System.out.println("inside sub1 one para const");
	}
	sub1(int num2,int num3)
	{
		super(10);
		this.num2=num2;
		System.out.println("inside sub1 two para const");
	}
}




public class AssignmentDay5 {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		sub1 s1=new sub1();
		sub1 s2=new sub1(10);
		sub1 s3=new sub1(20,30);     
		
	}

}


9) create interface "Game" , have an abstract method "play()". from this interface implements 
classes like "Cricket" , "FootBall" and "Tennis".Now Define one more class public class Demo 
with main function.In this class have a static method "perform" which will take interface reference
as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should 
be invoked. Call "perform()" method from main function.

package p2;

interface Game{
	
	void play();
	
}

class Cricket implements Game  
{
	public void play()
	{
		System.out.println("play like MS Dhoni");
	}
}

class FootBall implements Game  
{
	public void play()
	{
		System.out.println("play like Ronaldo");
	}
}

class Tennis implements Game  
{
	public void play()
	{
		System.out.println("play like Saniya Mirza");
	}
}

public class AssignmentDay5 {
	
	   static void perform(Game g)
	   {
		   g.play();
	   }
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		    perform(new Cricket());
		    perform(new FootBall());
		    perform(new Tennis());
	}

}








