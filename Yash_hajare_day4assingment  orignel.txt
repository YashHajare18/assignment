/*1)Define 2 classes “First” and “Second” with member variables , member
//functions and constructors of  your choice. Now define a class “Two” 
//in which define main function . In main function create various 
//instances of First and Second  and call their individual member functions.



package p2;

class First{
	private String name;
	private int age;
	
	
	public First()
	{
		
	}
	public First(String name, int age) {
		
		this.name = name;
		this.age = age;
	}
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
}

class Second{
	int rollno;
	int cls;
	
	public Second()
	{
		
	}
	public Second(int rollno, int cls) {
		
		this.rollno = rollno;
		this.cls = cls;
	}
	public int getRollno() {
		return rollno;
	}
	public void setRollno(int rollno) {
		this.rollno = rollno;
	}
	public int getCls() {
		return cls;
	}
	public void setCls(int cls) {
		this.cls = cls;
	}
	
	
}
 class AssignmentDay4{
	public static void main(String[] args) {
		
		First f=new First();
		Second s=new Second();
		f.setName("yash");
		f.setAge(22);
		s.setRollno(5);
		s.setCls(12);
		System.out.println(f.getName());
		System.out.println(f.getAge());
		System.out.println(s.getRollno());
		System.out.println(s.getCls());
		First f1=new First("Hajare",20);
		Second s1=new Second(7,10);
		System.out.println(f1.getName());
		System.out.println(f1.getAge());
		System.out.println(s1.getRollno());
		System.out.println(s1.getCls());
	}
}


2)Create a class with static and non-static member variables. Define static and non-static 
member functions. Create instance of this class and call both static and non-static 
member functions.

package p2;

class S_member{
	private String name;
	private static int age;
	
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public static int getAge() {
		return age;
	}
	public static void setAge(int age) {
		S_member.age = age;
	}
	
	
}


 class AssignmentDay4{
	public static void main(String[] args) {
		
		S_member s=new S_member();
		s.setName("yash");
		//s.setAge(18);
		S_member.setAge(22);
		System.out.println(s.getName());
		System.out.println(S_member.getAge());
		
	}
}


3)Define a class “Check” in which declare member variables using  different accessibility 
modifiers i.e.  <default>, private ,public and protected.   Define a function “disp”  which 
should be public.  Define a class “CheckDemo” in which you will write “main()” function. 
Create an instance of  the class “Check” and  show how many  variables can be accessed 
directly and how many indirectly.

package p2;

class Check{
	private int num1;
    int num2;
	protected int num3;
	public int num4;
	
	//public()
	
	public void Disp()
	{
		System.out.println(num1);
		System.out.println(num2);
		System.out.println(num3);
		System.out.println(num4);
		
	}
	
}


 class AssignmentDay4{
	public static void main(String[] args) {
		Check c= new Check();
		//System.out.println(c.num1); Error it not access out side class
		System.out.println(c.num2);//access same packed
		System.out.println(c.num3);//access same packed and child class
		System.out.println(c.num4);//access any where
		
		
		
	}
}



/*4)Show the example of single level inheritance with constructor invocation.
*/
package p2;

class Base{
	int num1;
	Base(){
		System.out.println("in base");
	}
	
	
}

class sub extends Base{
	int num2;
	
	sub(){
		System.out.println("in sub");
	}
}


 class AssignmentDay4{
	public static void main(String[] args) {
		sub s=new sub();
		
		
	}
}




/*5)Show the example of multi-level inheritance with constructor invocation.
*/
package p2;

class Base{
	int num1;
	Base(){
		System.out.println("in base");
	}
		
}

class sub1 extends Base{
	int num2;
	
	sub1(int k){
		System.out.println("in para sub1");
	}
}

class sub2 extends sub1{
	int num2;
	
	sub2(){
		super(10);
		System.out.println("in sub2");
	}
}

 class AssignmentDay4{
	public static void main(String[] args) {
		sub2 s=new sub2();
		
		
	}
}


/*6)Show the example of hierarchical inheritance with constructor invocation.
*/
package p2;

class Base{
	int num1;
	Base(int k){
		System.out.println("in base");
	}
		
}

class sub1 extends Base{
	int num2;
	sub1(){
		super(10);
		System.out.println("in  sub1");
	}
}

class sub2 extends Base{
	int num2;
	
	sub2(){
		super(20);
		System.out.println("in sub2");
	}
}

class sub3 extends Base{
	int num2;
	
	sub3(){
		super(30);
		System.out.println("in sub3");
	}
}
 class AssignmentDay4{
	public static void main(String[] args) {
		sub1 s1=new sub1();
		sub2 s2=new sub2();
		sub3 s3=new sub3();
		
		
	}
}



/*7)Define a parent and a child class . Now explain function overriding with Example.
*/
package p2;

class Base{
	int num1;
	
	
	public void disp()
	{
		System.out.println("in base disp");
	}
		
}

class sub extends Base{
	int num2;
	
	public void disp()
	{
		System.out.println("in sub disp");
	}
	public void disp1()
	{
		System.out.println("in sub disp1");
	}
}


 class AssignmentDay4{
	public static void main(String[] args) {
		sub s1=new sub();//late binding
		s1.disp();
		Base s2=new sub();//up casting and late binding 
		s2.disp();
		sub s3=(sub)s2;//down casting and late binding 
		s3.disp1();
	}
}



/*8)	Define a parent class with one function. Define child class with the function having 
same name as of parent class function, but having different argument.
Create an instance of child class and call the functions. 
Make sure u have followed the concept of “function overloading “ in inheritance.

*/
package p2;

class Base{
	int num1;
	
	
	public void disp()//Overridden
	{
		System.out.println("in base disp");
	}
		
}

class sub extends Base{
	int num2;
	
	public void disp(int k)
	{
		System.out.println("in sub overloading disp");
	}
	
}


 class AssignmentDay4{
	public static void main(String[] args) {
		sub s1=new sub();//late binding
		s1.disp();
		s1.disp(10);
	}
}



/*
9)	Define a class “Shape” with “draw()” function . Now derive  classes like “Circle”,
 “Polygon”,”Rectangle” etc. from “Shape” and override “draw()” function. 
 Define a class “ShapeDemo” in which  write  main()  function. 
 In the main function create a reference to Shape class referring to any of
  the sub class. Using array, call “draw()”  and check the result.
*/
package p2;

class Shape{
	int num1;
	
	
	public void draw()//Overridden
	{
		System.out.println("in base draw");
	}
		
}

class Circle extends Shape{
	int num2;
	
	public void draw()
	{
		System.out.println("in Circle draw");
	}
	
}

class Polygon extends Shape{
	int num2;
	
	public void draw()
	{
		System.out.println("in Polygon draw");
	}
	
}

class Rectangle extends Shape{
	int num2;
	
	public void draw()
	{
		System.out.println("in Rectangle draw");
	}
	
}

 class AssignmentDay4{
	 
	 
	public static void main(String[] args) {
		
		Shape s=new Rectangle();//up casting
		      s.draw();         //late binding
		 s=new Circle();//up casting
	                     s.draw();  
	     s=new Polygon();//up casting	
	          s.draw();//late binding
	}
}

/*
10)	Define an interface “Vehicle” with “start()” function . 
Now derive  classes like “TwoWheeler”, “ThreeWheeler”,”FourWheeler” etc. 
from “Vehicle” and override “start()” function. Define a class “VDemo” in which  
write  main()  function. In the main function create a reference to Vehicle  class 
referring to any of the sub class. Using array, call “start" method.
*/
package p2;

class Vehicle{
	int num1;
	
	
	public void start()//Overridden
	{
		System.out.println("in base start");
	}
		
}

class TwoWheeler extends Vehicle{
	int num2;
	
	public void start()
	{
		System.out.println("in TwoWheeler start");
	}
	
}

class ThreeWheeler extends Vehicle{
	int num2;
	
	public void start()
	{
		System.out.println("in ThreeWheeler start");
	}
	
}

class FourWheeler extends Vehicle{
	int num2;
	
	public void start()
	{
		System.out.println("in FourWheeler start");
	}
	
}

 class AssignmentDay4{
	 
	 
	public static void main(String[] args) {
		
		Vehicle v[]=new Vehicle[3];
		 v[0]=new TwoWheeler();
		 v[1]=new ThreeWheeler();
		 v[2]=new FourWheeler();
		 
		for(int i=0;i<v.length;i++)
		{
			v[i].start();
		}
	}
}
*/